// üê® Todo: Exercise #5
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Middleware ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ 1 ‡∏≠‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Function ‡∏ß‡πà‡∏≤ `protect`
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Client ‡πÅ‡∏ô‡∏ö Token ‡∏°‡∏≤‡πÉ‡∏ô Header ‡∏Ç‡∏≠‡∏á Request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
import jwt from "jsonwebtoken";

const protect = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1]; // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header "Authorization"

  if (!token) {
    return res
      .status(401)
      .json({ message: "Unauthorized. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, process.env.SECRET_KEY); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Token
    req.user = decoded; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Token ‡πÉ‡∏ô `req.user`
    next(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Middleware ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  } catch (error) {
    return res.status(401).json({ message: "Unauthorized. Invalid token." });
  }
};

export default protect;