import React, { useState } from "react";
import axios from "axios";

const AuthContext = React.createContext();

function AuthProvider(props) {
  const [state, setState] = useState({
    loading: null,
    error: null,
    user: null,
  });

  const login = async ({ username, password }) => {
    // üê® Todo: Exercise #4
    //  ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logic ‡∏Ç‡∏≠‡∏á Function `login` ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    //  Function `login` ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API POST /login
    //  ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Body ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ

    setState({ ...state, loading: true, error: null });
    try {
      const response = await axios.post("http://localhost:4000/login", {
        username,
        password,
      });

      if (response.status === 200) {
        localStorage.setItem("token", response.data.token);
        setState({
          ...state,
          loading: false,
          user: { username }, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
          error: null,
        });
        alert("Login successful!");
      }
    } catch (error) {
      const errorMessage =
        error.response?.data?.message || "An error occurred. Please try again.";
      setState({ ...state, loading: false, error: errorMessage });
      alert(`Login failed: ${errorMessage}`);
    }
  };
  const register = async ({ username, password, firstName, lastName }) => {
    // üê® Todo: Exercise #2
    //  ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logic ‡∏Ç‡∏≠‡∏á Function `register` ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    //  Function register ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API POST /register
    //  ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Body ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
    setState({ ...state, loading: true, error: null });
    try {
      await axios.post("http://localhost:4000/register", {
        username,
        password,
        firstName,
        lastName,
      });
      setState({ ...state, loading: false, error: null });
      alert("Registration successful!");
    } catch (error) {
      const errorMessage =
        error.response?.data?.message ||
        "An error occurred during registration. Please try again.";
      setState({ ...state, loading: false, error: errorMessage });
      alert(`Registration failed: ${errorMessage}`);
    }
  };

  const logout = () => {
    // üê® Todo: Exercise #7
    //  ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logic ‡∏Ç‡∏≠‡∏á Function `logout` ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    //  Function logout ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö JWT Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Local Storage
    localStorage.removeItem("token");
    setState({ ...state, user: null, error: null });
    alert("Logged out successfully!");
  };

  const isAuthenticated = Boolean(localStorage.getItem("token"));

  return (
    <AuthContext.Provider
      value={{ state, login, logout, register, isAuthenticated }}
    >
      {props.children}
    </AuthContext.Provider>
  );
}

// this is a hook that consume AuthContext
const useAuth = () => React.useContext(AuthContext);

export { AuthProvider, useAuth };
